plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'nu.studer.jooq' version '8.2'
	id 'groovy'
	id ('org.flywaydb.flyway') version ('9.16.0')
}

group = 'com.deyan'
version = '0.0.1-SNAPSHOT'
// ========= force every org.jooq:* artifact to 3.19.9 =========
ext['jooq.version'] = '3.19.9'
java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.jooq:jooq:3.19.9'
	implementation 'org.postgresql:postgresql:42.7.1'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-jooq'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	jooqGenerator 'org.postgresql:postgresql:42.7.1'

	//Redis Cache
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	testImplementation 'org.testcontainers:junit-jupiter:1.19.8'
	testImplementation 'org.flywaydb:flyway-core'          // migrations inside tests
	testImplementation platform("org.spockframework:spock-bom:2.3-groovy-4.0")
	testImplementation "org.spockframework:spock-core"
	testImplementation "org.spockframework:spock-spring"

	// Testcontainers
	testImplementation 'org.testcontainers:postgresql:1.19.8'


	implementation 'org.flywaydb:flyway-core:10.11.0'
	implementation 'org.flywaydb:flyway-database-postgresql'

	testImplementation 'org.testcontainers:junit-jupiter:1.19.8'

	implementation("org.springframework.boot:spring-boot-starter-webflux")   // WebClient
	testImplementation 'com.github.tomakehurst:wiremock-jre8:2.35.0'
	// Mock HTTP in tests

	compileOnly "org.projectlombok:lombok:1.18.32"
	annotationProcessor "org.projectlombok:lombok:1.18.32"
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5' // for JSON parsing
}



tasks.named('test') {
	useJUnitPlatform()
}

def dbUrl  = System.getenv('DB_URL')
		?: System.getenv('SPRING_DATASOURCE_URL')
		?: 'jdbc:postgresql://localhost:5433/mealplanner'

flyway {
	url = dbUrl
	user = 'postgres'
	password = 'postgres'
	schemas = ['public']
	locations = ['filesystem:src/main/resources/db/migration']
}

jooq {
	version = '3.19.9'
	configurations {
		main {
			generationTool {
				jdbc {
					driver = 'org.postgresql.Driver'
					url = dbUrl
					user = 'postgres'
					password = 'postgres'
				}
				generator {
					name = 'org.jooq.codegen.DefaultGenerator'
					database {
						name = 'org.jooq.meta.postgres.PostgresDatabase'
						inputSchema = 'public'
					}
					target {
						packageName = 'com.deyan.mealplanner.jooq'
						directory = "$buildDir/generated-src/jooq"
					}
				}
			}
		}
	}
}
import java.nio.file.*
def loadDotEnvIntoBootRun = { Task t ->
	Path env = rootProject.file('.env').toPath()
	if (Files.exists(env)) {
		Files.readAllLines(env).each { line ->
			// ignore comments / blanks
			if (!line.startsWith('#') && line.contains('=')) {
				def (k,v) = line.split('=',2)
				t.environment k.trim(), v.trim()
			}
		}
	}
}

tasks.named('bootRun').configure(loadDotEnvIntoBootRun)
tasks.named('test') {
	useJUnitPlatform()
	testLogging {
		events 'PASSED', 'FAILED', 'SKIPPED'
		exceptionFormat 'short'
	}
}

tasks.named('generateJooq') {
	dependsOn tasks.named('flywayMigrate')
}
