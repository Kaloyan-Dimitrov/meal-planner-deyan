/*==========================================================================
  V2__schema-refactor.sql          – idempotent
  * promote all PKs to BIGINT IDENTITY
  * deduplicate duplicate ingredient rows
  * add nutrition / goal columns
  * grams  → quantity_g + unit
  * useful uniqueness constraints

  Works even if it runs twice.
==========================================================================*/

/*-----------------------------------------------------------------------
 STEP 0 – Deduplicate duplicate INGREDIENT rows
-----------------------------------------------------------------------*/
WITH dupes AS (
    SELECT MIN(id)                       AS keep_id,
           ARRAY_REMOVE(array_agg(id), MIN(id)) AS dup_ids
    FROM   ingredient
    GROUP  BY name, category
    HAVING COUNT(*) > 1
)
-- 1) repoint FKs
UPDATE recipe_ingredient ri
SET    ingredient_id = d.keep_id
    FROM   dupes d
WHERE  ri.ingredient_id = ANY (d.dup_ids);

-- 2) delete extras
WITH dupes AS (
    SELECT MIN(id)                       AS keep_id,
           ARRAY_REMOVE(array_agg(id), MIN(id)) AS dup_ids
    FROM   ingredient
    GROUP  BY name, category
    HAVING COUNT(*) > 1
)
DELETE FROM ingredient i
    USING  dupes d
WHERE  i.id = ANY (d.dup_ids);

/*-----------------------------------------------------------------------
 HELPER – promote “id” to BIGINT IDENTITY (only if still int / serial)
-----------------------------------------------------------------------*/
CREATE OR REPLACE FUNCTION _promote_bigint_identity(p_tab text) RETURNS void
LANGUAGE plpgsql AS $$
DECLARE
col_info record;
BEGIN
SELECT column_name, data_type, identity_generation
INTO   col_info
FROM   information_schema.columns
WHERE  table_name  = p_tab
  AND  column_name = 'id';

IF col_info IS NULL THEN
        RAISE EXCEPTION '% has no id column', p_tab;
END IF;

    IF col_info.data_type <> 'bigint' THEN
        EXECUTE format('ALTER TABLE %I ALTER COLUMN id TYPE bigint', p_tab);
END IF;

    IF col_info.identity_generation IS NULL THEN
        EXECUTE format('ALTER TABLE %I ALTER COLUMN id DROP DEFAULT', p_tab);
        EXECUTE format('ALTER TABLE %I ALTER COLUMN id DROP IDENTITY IF EXISTS',
                       p_tab);
EXECUTE format('ALTER TABLE %I ALTER COLUMN id '||
               'ADD GENERATED BY DEFAULT AS IDENTITY', p_tab);
END IF;
END;
$$;

/*-----------------------------------------------------------------------
 STEP 1 – upgrade IDs to BIGINT IDENTITY
-----------------------------------------------------------------------*/
DO $$
BEGIN
    PERFORM _promote_bigint_identity('achievement');
    PERFORM _promote_bigint_identity('users');
    PERFORM _promote_bigint_identity('recipe');
    PERFORM _promote_bigint_identity('meal_plan');
    PERFORM _promote_bigint_identity('shopping_list');
    PERFORM _promote_bigint_identity('instruction_step');
    PERFORM _promote_bigint_identity('user_progress');
END;
$$;

/* align foreign keys to BIGINT --------------------------------------*/
ALTER TABLE IF EXISTS user_achievement
ALTER COLUMN achievement_id TYPE bigint,
    ALTER COLUMN user_id        TYPE bigint;

ALTER TABLE IF EXISTS meal_plan
ALTER COLUMN user_id TYPE bigint;

ALTER TABLE IF EXISTS meal_plan_recipe
ALTER COLUMN recipe_id     TYPE bigint,
    ALTER COLUMN meal_plan_id  TYPE bigint;

ALTER TABLE IF EXISTS instruction_step
ALTER COLUMN recipe_id TYPE bigint;

ALTER TABLE IF EXISTS recipe_ingredient
ALTER COLUMN recipe_id     TYPE bigint,
    ALTER COLUMN ingredient_id TYPE bigint;

ALTER TABLE IF EXISTS shopping_list
ALTER COLUMN meal_plan_id TYPE bigint;

ALTER TABLE IF EXISTS shopping_list_item
ALTER COLUMN ingredient_id    TYPE bigint,
    ALTER COLUMN shopping_list_id TYPE bigint;

/*-----------------------------------------------------------------------
 STEP 2 – new goal / macro columns  (IF NOT EXISTS keeps it safe)
-----------------------------------------------------------------------*/
ALTER TABLE meal_plan
    ADD COLUMN IF NOT EXISTS target_kcal       integer,
    ADD COLUMN IF NOT EXISTS target_protein_g  integer,
    ADD COLUMN IF NOT EXISTS target_carb_g     integer,
    ADD COLUMN IF NOT EXISTS target_fat_g      integer;

ALTER TABLE meal_plan_recipe
    ADD COLUMN IF NOT EXISTS day_index smallint NOT NULL DEFAULT 0,
    ADD COLUMN IF NOT EXISTS meal_slot text     NOT NULL DEFAULT 'lunch';

ALTER TABLE recipe
    ADD COLUMN IF NOT EXISTS servings               integer DEFAULT 1,
    ADD COLUMN IF NOT EXISTS kcal_per_serving       numeric,
    ADD COLUMN IF NOT EXISTS protein_g_per_serving  numeric,
    ADD COLUMN IF NOT EXISTS carb_g_per_serving     numeric,
    ADD COLUMN IF NOT EXISTS fat_g_per_serving      numeric;

/*-----------------------------------------------------------------------
 STEP 3 – rename grams → quantity_g  and add “unit”
-----------------------------------------------------------------------*/
DO $$
BEGIN
    IF EXISTS (
        SELECT 1
        FROM   information_schema.columns
        WHERE  table_name  = 'recipe_ingredient'
          AND  column_name = 'grams'
    ) THEN
ALTER TABLE recipe_ingredient
    RENAME COLUMN grams TO quantity_g;
END IF;
END;
$$;

ALTER TABLE recipe_ingredient
ALTER COLUMN quantity_g TYPE numeric,
    ADD    COLUMN IF NOT EXISTS unit text;

/*-----------------------------------------------------------------------
 STEP 4 – useful uniqueness constraints (compatible with PG 12-16)
-----------------------------------------------------------------------*/

-- ingredient(name,category) ------------------------------------------
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1
        FROM   pg_constraint
        WHERE  conname = 'ingredient_name_category_key'
    ) THEN
ALTER TABLE ingredient
    ADD CONSTRAINT ingredient_name_category_key
        UNIQUE (name, category);
END IF;
END;
$$;

-- recipe(name) --------------------------------------------------------
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1
        FROM   pg_constraint
        WHERE  conname = 'recipe_name_key'
    ) THEN
ALTER TABLE recipe
    ADD CONSTRAINT recipe_name_key
        UNIQUE (name);
END IF;
END;
$$;
